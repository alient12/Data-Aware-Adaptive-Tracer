#!/usr/bin/env bpftrace

uprobe:/lib/x86_64-linux-gnu/libc.so.6:ioctl
{
    if (arg1 == 0x541c)
    {
        printf("/lib/x86_64-linux-gnu/libc.so.6:ioctl:arg1 == 0x541c, Comm: %s, PID: %d\n", comm, pid);
        $t = nsecs(monotonic);
        @count0_ioctl[comm, pid, tid, arg0, arg1, arg2, arg3, arg4] = count();
        @stack0_ioctl[comm, pid, tid, $t, arg0, arg1, arg2, arg3, arg4] = ustack;
        @args0_ioctl[0] = arg0;
        @args0_ioctl[1] = arg1;
        @args0_ioctl[2] = arg2;
        @args0_ioctl[3] = arg3;
        @args0_ioctl[4] = arg4;
        @flag0_ioctl[comm, pid, tid] = 1;
    }
}


uretprobe:/lib/x86_64-linux-gnu/libc.so.6:ioctl
{
    if (@flag0_ioctl[comm, pid, tid] == 1)
    {
        $t = nsecs(monotonic);
        @flag0_ioctl[comm, pid, tid] = 0;
        @ret0_ioctl[comm, pid, tid, $t, @args0_ioctl[0], @args0_ioctl[1], @args0_ioctl[2], @args0_ioctl[3], @args0_ioctl[4]] = retval;
    }
}


uprobe:/lib/x86_64-linux-gnu/libc.so.6:ioctl
{
    if (true)
    {
        printf("/lib/x86_64-linux-gnu/libc.so.6:ioctl:auto arg0 arg1, Comm: %s, PID: %d\n", comm, pid);
        $t = nsecs(monotonic);
        @count1_ioctl[comm, pid, tid, arg0, arg1, arg2, arg3, arg4] = count();
        @stack1_ioctl[comm, pid, tid, $t, arg0, arg1, arg2, arg3, arg4] = ustack;
        @args1_ioctl[0] = arg0;
        @args1_ioctl[1] = arg1;
        @args1_ioctl[2] = arg2;
        @args1_ioctl[3] = arg3;
        @args1_ioctl[4] = arg4;
        @flag1_ioctl[comm, pid, tid] = 1;
    }
    @sampler1_ioctl_arg0[arg0] = count();
    @sampler1_ioctl_arg1[arg1] = count();
    @sampler1_ioctl_arg2[arg2] = count();
    @sampler1_ioctl_arg3[arg3] = count();
    @sampler1_ioctl_arg4[arg4] = count();
}


uretprobe:/lib/x86_64-linux-gnu/libc.so.6:ioctl
{
    if (@flag1_ioctl[comm, pid, tid] == 1)
    {
        $t = nsecs(monotonic);
        @flag1_ioctl[comm, pid, tid] = 0;
        @ret1_ioctl[comm, pid, tid, $t, @args1_ioctl[0], @args1_ioctl[1], @args1_ioctl[2], @args1_ioctl[3], @args1_ioctl[4]] = retval;
    }
}


uprobe:/lib/x86_64-linux-gnu/libcrypto.so.3:EVP_EncryptUpdate
{
    if (arg4 >= 64 && arg4 <= 1024)
    {
        printf("/lib/x86_64-linux-gnu/libcrypto.so.3:EVP_EncryptUpdate:arg4 >= 64 && arg4 <= 1024, Comm: %s, PID: %d\n", comm, pid);
        $t = nsecs(monotonic);
        @count2_EVP_EncryptUpdate[comm, pid, tid, arg4] = count();
        @stack2_EVP_EncryptUpdate[comm, pid, tid, $t, arg4] = ustack;
    }
}


uprobe:/lib/x86_64-linux-gnu/libcrypto.so.3:EVP_EncryptUpdate
{
    if (true)
    {
        printf("/lib/x86_64-linux-gnu/libcrypto.so.3:EVP_EncryptUpdate:auto arg4 arg5, Comm: %s, PID: %d\n", comm, pid);
        $t = nsecs(monotonic);
        @count3_EVP_EncryptUpdate[comm, pid, tid, arg4, arg5] = count();
        @stack3_EVP_EncryptUpdate[comm, pid, tid, $t, arg4, arg5] = ustack;
    }
    @sampler3_EVP_EncryptUpdate_arg4[arg4] = count();
    @sampler3_EVP_EncryptUpdate_arg5[arg5] = count();
}


uprobe:/lib/x86_64-linux-gnu/libcrypto.so.3:EVP_EncryptFinal_ex
{
    if (arg2 > 0 && arg2 <= 1024)
    {
        printf("/lib/x86_64-linux-gnu/libcrypto.so.3:EVP_EncryptFinal_ex:arg2 > 0 && arg2 <= 1024, Comm: %s, PID: %d\n", comm, pid);
        $t = nsecs(monotonic);
        @count4_EVP_EncryptFinal_ex[comm, pid, tid, arg2] = count();
        @stack4_EVP_EncryptFinal_ex[comm, pid, tid, $t, arg2] = ustack;
        @args4_EVP_EncryptFinal_ex[0] = arg2;
        @flag4_EVP_EncryptFinal_ex[comm, pid, tid] = 1;
    }
}


uretprobe:/lib/x86_64-linux-gnu/libcrypto.so.3:EVP_EncryptFinal_ex
{
    if (@flag4_EVP_EncryptFinal_ex[comm, pid, tid] == 1)
    {
        $t = nsecs(monotonic);
        @flag4_EVP_EncryptFinal_ex[comm, pid, tid] = 0;
        @ret4_EVP_EncryptFinal_ex[comm, pid, tid, $t, @args4_EVP_EncryptFinal_ex[0]] = retval;
    }
}


uprobe:/lib/x86_64-linux-gnu/libcrypto.so.3:EVP_EncryptFinal_ex
{
    if (true)
    {
        printf("/lib/x86_64-linux-gnu/libcrypto.so.3:EVP_EncryptFinal_ex:auto arg1, Comm: %s, PID: %d\n", comm, pid);
        $t = nsecs(monotonic);
        @count5_EVP_EncryptFinal_ex[comm, pid, tid, arg1] = count();
        @stack5_EVP_EncryptFinal_ex[comm, pid, tid, $t, arg1] = ustack;
        @args5_EVP_EncryptFinal_ex[0] = arg1;
        @flag5_EVP_EncryptFinal_ex[comm, pid, tid] = 1;
    }
    @sampler5_EVP_EncryptFinal_ex_arg1[arg1] = count();
}


uretprobe:/lib/x86_64-linux-gnu/libcrypto.so.3:EVP_EncryptFinal_ex
{
    if (@flag5_EVP_EncryptFinal_ex[comm, pid, tid] == 1)
    {
        $t = nsecs(monotonic);
        @flag5_EVP_EncryptFinal_ex[comm, pid, tid] = 0;
        @ret5_EVP_EncryptFinal_ex[comm, pid, tid, $t, @args5_EVP_EncryptFinal_ex[0]] = retval;
    }
}


BEGIN
{
    @args0_ioctl[0] = 0;
    @args1_ioctl[0] = 0;
    @args4_EVP_EncryptFinal_ex[0] = 0;
    @args5_EVP_EncryptFinal_ex[0] = 0;
}


interval:s:5
{
    print(@count0_ioctl);clear(@count0_ioctl);
    print(@count1_ioctl);clear(@count1_ioctl);
    print(@count2_EVP_EncryptUpdate);clear(@count2_EVP_EncryptUpdate);
    print(@count3_EVP_EncryptUpdate);clear(@count3_EVP_EncryptUpdate);
    print(@count4_EVP_EncryptFinal_ex);clear(@count4_EVP_EncryptFinal_ex);
    print(@count5_EVP_EncryptFinal_ex);clear(@count5_EVP_EncryptFinal_ex);
    print(@stack0_ioctl);clear(@stack0_ioctl);
    print(@stack1_ioctl);clear(@stack1_ioctl);
    print(@stack2_EVP_EncryptUpdate);clear(@stack2_EVP_EncryptUpdate);
    print(@stack3_EVP_EncryptUpdate);clear(@stack3_EVP_EncryptUpdate);
    print(@stack4_EVP_EncryptFinal_ex);clear(@stack4_EVP_EncryptFinal_ex);
    print(@stack5_EVP_EncryptFinal_ex);clear(@stack5_EVP_EncryptFinal_ex);
    print(@sampler1_ioctl_arg0);clear(@sampler1_ioctl_arg0);
    print(@sampler1_ioctl_arg1);clear(@sampler1_ioctl_arg1);
    print(@sampler1_ioctl_arg2);clear(@sampler1_ioctl_arg2);
    print(@sampler1_ioctl_arg3);clear(@sampler1_ioctl_arg3);
    print(@sampler1_ioctl_arg4);clear(@sampler1_ioctl_arg4);
    print(@sampler3_EVP_EncryptUpdate_arg4);clear(@sampler3_EVP_EncryptUpdate_arg4);
    print(@sampler3_EVP_EncryptUpdate_arg5);clear(@sampler3_EVP_EncryptUpdate_arg5);
    print(@sampler5_EVP_EncryptFinal_ex_arg1);clear(@sampler5_EVP_EncryptFinal_ex_arg1);
    print(@ret0_ioctl);clear(@ret0_ioctl);
    print(@ret1_ioctl);clear(@ret1_ioctl);
    print(@ret4_EVP_EncryptFinal_ex);clear(@ret4_EVP_EncryptFinal_ex);
    print(@ret5_EVP_EncryptFinal_ex);clear(@ret5_EVP_EncryptFinal_ex);
    exit();
}
